/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface ScrollView {
  /**
   * 允许横向滚动
   */
  "scroll-x"?: boolean;
  /**
   * 允许纵向滚动
   */
  "scroll-y"?: boolean;
  /**
   * 距顶部/左边多远时，触发 scrolltoupper 事件
   */
  "upper-threshold"?: number | string;
  /**
   * 距底部/右边多远时，触发 scrolltolower 事件
   */
  "lower-threshold"?: number | string;
  /**
   * 设置竖向滚动条位置
   */
  "scroll-top"?: number | string;
  /**
   * 设置横向滚动条位置
   */
  "scroll-left"?: number | string;
  /**
   * 值应为某子元素id（id不能以数字开头）。设置哪个方向可滚动，则在哪个方向滚动到该元素
   */
  "scroll-into-view"?: string;
  /**
   * 在设置滚动条位置时使用动画过渡
   */
  "scroll-with-animation"?: boolean;
  /**
   * iOS点击顶部状态栏、安卓双击标题栏时，滚动条返回顶部，只支持竖向
   */
  "enable-back-to-top"?: boolean;
  /**
   * 启用 flexbox 布局。开启后，当前节点声明了 `display: flex` 就会成为 flex container，并作用于其孩子节点。
   */
  "enable-flex"?: boolean;
  /**
   * 开启 scroll anchoring 特性，即控制滚动位置不随内容变化而抖动，仅在 iOS 下生效，安卓下可参考 CSS `overflow-anchor` 属性。
   */
  "scroll-anchoring"?: boolean;
  /**
   * 开启 passive 特性，能优化一定的滚动性能
   */
  "enable-passive"?: boolean;
  /**
   * 开启自定义下拉刷新
   */
  "refresher-enabled"?: boolean;
  /**
   * 设置自定义下拉刷新阈值
   */
  "refresher-threshold"?: number;
  /**
   * 设置自定义下拉刷新默认样式，支持设置 `black | white | none`， none 表示不使用默认样式
   */
  "refresher-default-style"?: string;
  /**
   * 设置自定义下拉刷新区域背景颜色
   */
  "refresher-background"?: string;
  /**
   * 设置当前下拉刷新状态，true 表示下拉刷新已经被触发，false 表示下拉刷新未被触发
   */
  "refresher-triggered"?: boolean;
  /**
   * 启用 scroll-view 增强特性，启用后可通过 ScrollViewContext 操作 scroll-view
   */
  enhanced?: boolean;
  /**
   * iOS 下 scroll-view 边界弹性控制 (同时开启 enhanced 属性后生效)
   */
  bounces?: boolean;
  /**
   * 滚动条显隐控制 (同时开启 enhanced 属性后生效)
   */
  "show-scrollbar"?: boolean;
  /**
   * 分页滑动效果 (同时开启 enhanced 属性后生效)
   */
  "paging-enabled"?: boolean;
  /**
   * 滑动减速速率控制 (同时开启 enhanced 属性后生效)
   */
  "fast-deceleration"?: boolean;
  /**
   * 滑动开始事件 (同时开启 enhanced 属性后生效) detail { scrollTop, scrollLeft }
   */
  bindDragStart?: () => void;
  /**
   * 滑动事件 (同时开启 enhanced 属性后生效) detail { scrollTop, scrollLeft }
   */
  bindDragging?: () => void;
  /**
   * 滑动结束事件 (同时开启 enhanced 属性后生效) detail { scrollTop, scrollLeft, velocity }
   */
  bindDragEnd?: () => void;
  /**
   * 滚动到顶部/左边时触发
   */
  bindScrollToUpper?: () => void;
  /**
   * 滚动到底部/右边时触发
   */
  bindScrollToLower?: () => void;
  /**
   * 滚动时触发，event.detail = {scrollLeft, scrollTop, scrollHeight, scrollWidth, deltaX, deltaY}
   */
  bindScroll?: () => void;
  /**
   * 自定义下拉刷新控件被下拉
   */
  bindRefresherPulling?: () => void;
  /**
   * 自定义下拉刷新被触发
   */
  bindRefresherRefresh?: () => void;
  /**
   * 自定义下拉刷新被复位
   */
  bindRefresherRestore?: () => void;
  /**
   * 自定义下拉刷新被中止
   */
  bindRefresherAbort?: () => void;
}
